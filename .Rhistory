cartoon_modified <- cartoon %>%
dplyr::mutate(
Gender = as_factor(Gender),
Cartoon = as_factor(Cartoon)
)
cartoon_modified
gf_histogram(~Rating,
fill = ~Cartoon,
data = cartoon_modified, alpha = 0.5
) %>%
gf_vline(xintercept = ~ mean(Rating)) %>%
gf_labs(
title = "Histograms of Ratings vs Cartoon",
x = "Hatching Time", y = "Count"
)
%>%
gf_histogram(~Rating,
fill = ~Cartoon,
data = cartoon_modified, alpha = 0.5
) %>%
gf_vline(xintercept = ~ mean(Rating)) %>%
gf_labs(
title = "Histograms of Ratings vs Cartoon",
x = "Hatching Time", y = "Count"
) %>%
gf_refine(guides(fill = guide_legend(title = "Temperature level (째C)")))
gf_boxplot(
data = cartoon_modified,
Ratings ~ Cartoon,
fill = ~Cartoon,
alpha = 0.5
) %>%
gf_vline(xintercept = ~ mean(Rating)) %>%
gf_labs(
title = "Boxplots of Hatching Time Distributions vs Temperature",
x = "Temperature", y = "Hatching Time",
caption = "Using ggprism"
) %>%
gf_refine(
scale_x_discrete(guide = "prism_bracket"),
guides(fill = guide_legend(title = "Temperature level (째C)"))
)
gf_boxplot(
data = cartoon_modified,
Rating ~ Cartoon,
fill = ~Cartoon,
alpha = 0.5
) %>%
gf_vline(xintercept = ~ mean(Rating)) %>%
gf_labs(
title = "Boxplots of Rating vs Cartoon",
x = "Temperature", y = "Hatching Time",
caption = "Using ggprism"
) %>%
gf_refine(
scale_x_discrete(guide = "prism_bracket"),
guides(fill = guide_legend(title = "Temperature level (째C)"))
)
library(knitr)
library(tidyverse)
library(ggformula)
library(skimr)
library(ggprism)
library(kableExtra)
library(mosaic)
library(supernova)
gf_boxplot(
data = cartoon_modified,
Rating ~ Cartoon,
fill = ~Cartoon,
alpha = 0.5
) %>%
gf_vline(xintercept = ~ mean(Rating)) %>%
gf_labs(
title = "Boxplots of Rating vs Cartoon",
x = "Temperature", y = "Hatching Time",
caption = "Using ggprism"
) %>%
gf_refine(
scale_x_discrete(guide = "prism_bracket"),
guides(fill = guide_legend(title = "Temperature level (째C)"))
)
cartoon_anova <- aov(Rating ~ Cartoon, data = cartoon_modified)
supernova::pairwise(cartoon_anova,
correction = "Bonferroni", # Try "Tukey"
alpha = 0.05, # 95% CI calculation
var_equal = TRUE, # We'll see
plot = TRUE
)
supernova::equation(cartoon_anova)
shapiro.test(x = cartoon_modified$Rating)
cartoon_modified %>%
group_by(Cartoon) %>%
group_modify(~ .x %>%)
cartoon_modified %>%
group_by(Cartoon) %>%
group_modify(~ .x %>%
select(Rating) %>%
as_vector() %>%
shapiro.test() %>%
broom::tidy()
cartoon_modified %>%
group_by(Cartoon) %>%
group_modify(~ .x %>%
select(Rating) %>%
as_vector() %>%
shapiro.test() %>%
broom::tidy())
cartoon_anova$residuals %>%
as_tibble() %>%
gf_dhistogram(~value, data = .) %>%
gf_fitdistr()
##
cartoon_anova$residuals %>%
as_tibble() %>%
gf_qq(~value, data = .) %>%
gf_qqstep() %>%
gf_qqline()
##
shapiro.test(cartoon_anova$residuals)
cartoon_modified %>%
group_by(Cartoon) %>%
summarise(variance = var(Rating))
# Not too different...OK on with the test
DescTools::LeveneTest(Rating ~ Cartoon, data = cartoon_modified)
install.packages("DescTools")
library(knitr)
library(tidyverse)
library(ggformula)
library(skimr)
library(ggprism)
library(kableExtra)
library(mosaic)
library(supernova)
library(DescTools)
cartoon_modified %>%
group_by(Cartoon) %>%
summarise(variance = var(Rating))
# Not too different...OK on with the test
DescTools::LeveneTest(Rating ~ Cartoon, data = cartoon_modified)
##
fligner.test(Rating ~ Cartoon, data = cartoon_modified)
cartoon_supernova <-
supernova::pairwise(cartoon_anova,
plot = TRUE,
alpha = 0.05,
correction = "Bonferroni"
)
cartoon_supernova
observed_infer <-
cartoon_modified %>%
specify(Rating ~ Cartoon) %>%
hypothesise(null = "independence") %>%
calculate(stat = "F")
library(knitr)
library(tidyverse)
library(ggformula)
library(skimr)
library(ggprism)
library(kableExtra)
library(mosaic)
library(supernova)
library(DescTools)
library(broom)
library(Infer)
library(knitr)
library(tidyverse)
library(ggformula)
library(skimr)
library(ggprism)
library(kableExtra)
library(mosaic)
library(supernova)
library(DescTools)
library(broom)
library(infer)
library(knitr)
library(tidyverse)
library(ggformula)
library(skimr)
library(ggprism)
library(kableExtra)
library(mosaic)
library(supernova)
library(DescTools)
library(broom)
library(infer)
library(patchwork)
observed_infer <-
cartoon_modified %>%
specify(Rating ~ Cartoon) %>%
hypothesise(null = "independence") %>%
calculate(stat = "F")
observed_infer
null_dist_infer <- cartoon_modified %>%
specify(Rating ~ Cartoon) %>%
hypothesise(null = "independence") %>%
generate(reps = 4999, type = "permute") %>%
calculate(stat = "F")
##
null_dist_infer
null_dist_infer %>%
visualise(method = "simulation") +
shade_p_value(obs_stat = observed_infer$stat, direction = "right") +
scale_x_continuous(trans = "log10", expand = c(0, 0)) +
coord_cartesian(xlim = c(0.2, 500), clip = "off") +
annotation_logticks(outside = FALSE) +
theme_custom()
null_dist_infer %>%
visualise(method = "simulation") +
shade_p_value(obs_stat = observed_infer$stat, direction = "right") +
scale_x_continuous(trans = "log10", expand = c(0, 0)) +
coord_cartesian(xlim = c(0.2, 500), clip = "off") +
annotation_logticks(outside = FALSE)
gf_histogram(~Rating,
fill = ~Cartoon,
data = cartoon_modified, alpha = 0.5
) %>%
gf_vline(xintercept = ~ mean(Rating)) %>%
gf_labs(
title = "Histograms of Ratings vs Cartoon",
x = "Ratings", y = "Count"
) %>%
gf_refine(guides(fill = guide_legend(title = "Cartoon")))
tips %>%
gf_density(
~ Tip,
fill = ~ Food.preferance,
alpha = 0.5,
title = "Tips",
subtitle = "Veg vs Non-veg"
)
tips %>% crosstable(Tip~Food.preferance)%>% as_flextable()
tips %>%
gf_density(
~ Tip,
fill = ~ Food.preferance,
alpha = 0.5,
title = "Math Anxiety Score Densities",
subtitle = "Boys vs Girls"
)
tips %>%
gf_boxplot(
Tip ~ Food.preferance,
fill = ~ Food.preferance,
alpha = 0.5,
title = "Math Anxiety Score Box Plots",
subtitle = "Boys vs Girls"
)
tips %>% count(Food.preferance)
tips %>%
group_by(Food.preferance) %>%
summarise(mean = mean(Tip))
#| label: setup
library(tidyverse)
library(ggformula)
library(crosstable)
library(mosaic)
pmoney <- read.csv("../../data/PocketMoney.csv")
pmoney
pmoney <- read.csv("../../data/PocketMoney.csv")
pmoney
pmoney_modified <-pmoney %>%
dplyr::mutate(
Gender = as_factor(Gender)
)
pmoney_modified <-pmoney %>%
dplyr::mutate(
Gender = as_factor(Gender)
)
pmoney_modified
pmoney_modified %>%
gf_density(
~ Money_spent,
fill = ~ Gender,
alpha = 0.5,
title = "Money spent",
subtitle = "Male vs Female"
)
pmoney_modified %>%
gf_density(
~ Money_spent,
fill = ~ Gender,
alpha = 0.5,
title = "Money spent",
subtitle = "Male vs Female"
)
MathAnxiety %>%
gf_boxplot(
Money_spent ~ Gender,
fill = ~ Gender,
alpha = 0.5,
title = "Math Anxiety Score Box Plots",
subtitle = "Boys vs Girls"
)
pmoney_modified %>%
gf_density(
~ Money_spent,
fill = ~ Gender,
alpha = 0.5,
title = "Money spent",
subtitle = "Male vs Female"
)
pmoney_modified %>%
gf_boxplot(
Money_spent ~ Gender,
fill = ~ Gender,
alpha = 0.5,
title = "Math Anxiety Score Box Plots",
subtitle = "Boys vs Girls"
)
##
pmoney_modified %>% count(Gender)
pmoney_modified %>%
group_by(Gender) %>%
summarise(mean = mean(Money_spent))
pmoney_modified %>%
gf_density( ~ Money_spent,
fill = ~ Gender,
alpha = 0.5,
title = "Money spent for males and females") %>%
gf_facet_grid(~ Gender) %>%
gf_fitdistr(dist = "dnorm")
##
pmoney_modified %>%
gf_qqline(~ Money_spent, color = ~ Gender,
title = "Money Spent..is it Normally Distributed?") %>%
gf_qq() %>%
gf_facet_wrap(~ Gender)  # independent y-axis
##
male_moneyspent <- MathAnxiety %>%
filter(Gender== "Male") %>%
select(Money_spent)
pmoney_modified %>%
gf_density( ~ Money_spent,
fill = ~ Gender,
alpha = 0.5,
title = "Money spent for males and females") %>%
gf_facet_grid(~ Gender) %>%
gf_fitdistr(dist = "dnorm")
##
pmoney_modified %>%
gf_qqline(~ Money_spent, color = ~ Gender,
title = "Money Spent..is it Normally Distributed?") %>%
gf_qq() %>%
gf_facet_wrap(~ Gender)  # independent y-axis
##
male_moneyspent <- pmoney_modified %>%
filter(Gender== "Male") %>%
select(Money_spent)
##
female_moneyspent <- pmoney_modified %>%
filter(Gender== "Female") %>%
select(Money_spent)
shapiro.test(male_moneyspent$Money_spent)
shapiro.test(female_moneyspent$Money_spent)
var.test(Money_spent ~ Gender, data = pmoney_modified,
conf.int = TRUE, conf.level = 0.95) %>%
broom::tidy()
qf(0.975,275,322)
qf(0.646,40,40)
obs_diff_amas <- diffmean(Money_spent ~ Gender, data = pmoney_modified)
obs_diff_amas
mosaic::t_test(Money_spent ~ Gender, data = pmoney_modified) %>%
broom::tidy()
wilcox.test(Money_spent ~ Gender, data = pmoney_modified,
conf.int = TRUE,
conf.level = 0.95) %>%
broom::tidy()
null_dist_moneyspent <-
do(4999) * diffmean(data = pmoney_modified, Money_spent ~ shuffle(Gender))
null_dist_moneyspent
obs_diff_moneyspent <- diffmean(Money_spent ~ Gender, data = pmoney_modified)
obs_diff_mmoneyspent
obs_diff_moneyspent <- diffmean(Money_spent ~ Gender, data = pmoney_modified)
obs_diff_moneyspent
gf_histogram(data = null_dist_moneyspent, ~ diffmean, bins = 25) %>%
gf_vline(xintercept = obs_diff_moneyspent,
colour = "red", linewidth = 1,
title = "Null Distribution by Permutation",
subtitle = "Histogram") %>%
gf_labs(x = "Difference in Means")
###
gf_ecdf(data = null_dist_moneyspent, ~ diffmean,
linewidth = 1) %>%
gf_vline(xintercept = obs_diff_moneyspent,
colour = "red", linewidth = 1,
title = "Null Distribution by Permutation",
subtitle = "Cumulative Density") %>%
gf_labs(x = "Difference in Means")
1-prop1(~ diffmean <= obs_diff_moneyspent, data = null_dist_moneyspent)
library(knitr)
library(tidyverse)
library(ggformula)
library(skimr)
library(ggprism)
library(kableExtra)
library(mosaic)
library(supernova)
library(DescTools)
library(broom)
library(infer)
library(patchwork)
grades <- read.csv("../../data/data/Art, Design, and Vocation are all diff.csv")
grades <- read.csv("../../data/Art, Design, and Vocation are all diff.csv")
grades
grades_modified <- cartoon %>%
dplyr::mutate(
Degree = as_factor(Degree),
Letter.Grade = as_factor(Letter.Grade)
)
grades_modified <- grades %>%
dplyr::mutate(
Degree = as_factor(Degree),
Letter.Grade = as_factor(Letter.Grade)
)
grades_modified
grades_modified <- grades %>%
dplyr::mutate(
Degree = as_factor(Degree),
Letter.Grade = as_factor(Letter.Grade)
Gender = as_factor(Gender)
grades_modified <- grades %>%
dplyr::mutate(
Degree = as_factor(Degree),
Letter.Grade = as_factor(Letter.Grade),
Gender = as_factor(Gender)
)
grades_modified
gf_histogram(~Score,
fill = ~Degree,
data = grades_modified, alpha = 0.5
) %>%
gf_vline(xintercept = ~ mean(Rating)) %>%
gf_labs(
title = "Histograms of Score vs Degree",
x = "Ratings", y = "Count"
) %>%
gf_refine(guides(fill = guide_legend(title = "Score")))
gf_histogram(~Score,
fill = ~Degree,
data = grades_modified, alpha = 0.5
) %>%
gf_vline(xintercept = ~ mean(Score)) %>%
gf_labs(
title = "Histograms of Score vs Degree",
x = "Ratings", y = "Count"
) %>%
gf_refine(guides(fill = guide_legend(title = "Score")))
gf_boxplot(
data = grades_modified,
Score ~ Degree,
fill = ~ Degree,
alpha = 0.5
) %>%
gf_vline(xintercept = ~ mean(Score)) %>%
gf_labs(
title = "Boxplots of Score vs Degree",
x = "Degree", y = "Score",
caption = "Using ggprism"
) %>%
gf_refine(
scale_x_discrete(guide = "prism_bracket"),
guides(fill = guide_legend(title = "Degree"))
)
grades_anova <- aov(Score ~ Degree, data = grades_modified)
supernova::pairwise(grades_anova,
correction = "Bonferroni", # Try "Tukey"
alpha = 0.05, # 95% CI calculation
var_equal = TRUE, # We'll see
plot = TRUE
)
supernova::equation(grades_anova)
shapiro.test(x = grades_modified$Degree)
shapiro.test(x = grades_modified$Score)
grades_modified %>%
group_by(Degree) %>%
group_modify(~ .x %>%
select(Score) %>%
as_vector() %>%
shapiro.test() %>%
broom::tidy())
grades_anova$residuals %>%
as_tibble() %>%
gf_dhistogram(~value, data = .) %>%
gf_fitdistr()
##
grades_anova$residuals %>%
as_tibble() %>%
gf_qq(~value, data = .) %>%
gf_qqstep() %>%
gf_qqline()
##
shapiro.test(grades_anova$residuals)
grades_modified %>%
group_by(Degree) %>%
summarise(variance = var(Score))
# Not too different...OK on with the test
DescTools::LeveneTest(Score ~ Degree, data = grades_modified)
##
fligner.test(Score ~ Degree, data = grades_modified)
grades_supernova <-
supernova::pairwise(grades_anova,
plot = TRUE,
alpha = 0.05,
correction = "Bonferroni"
)
grades_supernova
gf_histogram(~Tip,fill=~
Food.preferance,data=tips, positon = "dodge")
gf_histogram(~Tip,fill=~
Food.preferance,data=tips)
